/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dorn.view;


import com.dorn.controller.Principal;
import com.dorn.model.Avatar;
import com.dorn.model.Jugador;
import com.dorn.model.power.Habilidad;
import com.dorn.model.heroe.Heroe;
import com.dorn.model.heroe.Zorkal;
import com.dorn.model.map.Casilla;
import com.dorn.model.map.Ficha;
import com.dorn.model.map.Mapa;
import com.dorn.model.monster.Criatura;
import com.dorn.model.ritual.Ritual;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;


/**
 *
 * @author t30r3m4
 */
public class Tablero extends javax.swing.JFrame {
    Principal principal;
    Zorkal guardian;
    Heroe heroeActual;
    int widthScreen,heightScreen;
    Double factorEscaladoX,factorEscaladoY;
    ArrayList<Jugador> jugadores;
    private int jugadorActual;
    Mapa mapa;
    boolean esEscalado;
    int indiceCriaturaInicial;
    int indiceCriaturaActual;
    Avatar personajeActual;
    
    ImageIcon icMapaOriginal,icMapaEscalado;

    JButton br_4 ;
    JButton br_up ;
    JButton br_1 ;               
    //-----Parte central
    JButton br_left ;
    JButton br_0 ;
    JButton br_right;      
    //-----Parte inferior        
    JButton br_3 ;
    JButton br_down;
    JButton br_2 ;
  
    
    
    
    public Tablero() {
        //this.principal=pp;
        initComponents();
        ajustarPantalla();
        //dibujarTablero("");
        //dibujarSecuencia();
        //dibujarHeroe(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMapa = new javax.swing.JLabel();
        jpPrincipal = new javax.swing.JPanel();
        jpIzquierda = new javax.swing.JPanel();
        jpSecuencia0 = new javax.swing.JPanel();
        jsMapa = new javax.swing.JScrollPane();
        jpMapa = new javax.swing.JLayeredPane();
        jpSecuencia1 = new javax.swing.JPanel();
        jpSecuencia2 = new javax.swing.JPanel();
        jpSecuencia3 = new javax.swing.JPanel();
        jpDerecha = new javax.swing.JPanel();
        jpImagenHeroe = new javax.swing.JPanel();
        lblImagenHeroe = new javax.swing.JLabel();
        jpVida = new javax.swing.JPanel();
        jpPuntosVida = new javax.swing.JPanel();
        jpExperiencia = new javax.swing.JPanel();
        jpPuntosExperiencia = new javax.swing.JPanel();
        jpMovimiento = new javax.swing.JPanel();
        jpAtaque = new javax.swing.JPanel();
        jpAccion = new javax.swing.JPanel();
        jpBoton = new javax.swing.JPanel();

        lblMapa.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblMapa.setAlignmentY(0.0F);
        lblMapa.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpPrincipal.setLayout(new javax.swing.BoxLayout(jpPrincipal, javax.swing.BoxLayout.X_AXIS));

        jpIzquierda.setLayout(new javax.swing.BoxLayout(jpIzquierda, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout jpSecuencia0Layout = new javax.swing.GroupLayout(jpSecuencia0);
        jpSecuencia0.setLayout(jpSecuencia0Layout);
        jpSecuencia0Layout.setHorizontalGroup(
            jpSecuencia0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpSecuencia0Layout.setVerticalGroup(
            jpSecuencia0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        jpIzquierda.add(jpSecuencia0);

        jpMapa.setBackground(new java.awt.Color(1, 1, 1));
        jpMapa.setAutoscrolls(true);
        jpMapa.setOpaque(true);

        javax.swing.GroupLayout jpMapaLayout = new javax.swing.GroupLayout(jpMapa);
        jpMapa.setLayout(jpMapaLayout);
        jpMapaLayout.setHorizontalGroup(
            jpMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 57, Short.MAX_VALUE)
        );
        jpMapaLayout.setVerticalGroup(
            jpMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 74, Short.MAX_VALUE)
        );

        jsMapa.setViewportView(jpMapa);

        jpIzquierda.add(jsMapa);

        javax.swing.GroupLayout jpSecuencia1Layout = new javax.swing.GroupLayout(jpSecuencia1);
        jpSecuencia1.setLayout(jpSecuencia1Layout);
        jpSecuencia1Layout.setHorizontalGroup(
            jpSecuencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpSecuencia1Layout.setVerticalGroup(
            jpSecuencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
        );

        jpIzquierda.add(jpSecuencia1);

        javax.swing.GroupLayout jpSecuencia2Layout = new javax.swing.GroupLayout(jpSecuencia2);
        jpSecuencia2.setLayout(jpSecuencia2Layout);
        jpSecuencia2Layout.setHorizontalGroup(
            jpSecuencia2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpSecuencia2Layout.setVerticalGroup(
            jpSecuencia2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        jpIzquierda.add(jpSecuencia2);

        javax.swing.GroupLayout jpSecuencia3Layout = new javax.swing.GroupLayout(jpSecuencia3);
        jpSecuencia3.setLayout(jpSecuencia3Layout);
        jpSecuencia3Layout.setHorizontalGroup(
            jpSecuencia3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpSecuencia3Layout.setVerticalGroup(
            jpSecuencia3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );

        jpIzquierda.add(jpSecuencia3);

        jpPrincipal.add(jpIzquierda);

        jpDerecha.setLayout(new javax.swing.BoxLayout(jpDerecha, javax.swing.BoxLayout.Y_AXIS));

        jpImagenHeroe.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Heroe", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 24), new java.awt.Color(254, 254, 254))); // NOI18N
        jpImagenHeroe.setLayout(null);
        jpImagenHeroe.add(lblImagenHeroe);
        lblImagenHeroe.setBounds(0, 0, 0, 0);

        jpDerecha.add(jpImagenHeroe);

        jpVida.setLayout(new javax.swing.BoxLayout(jpVida, javax.swing.BoxLayout.Y_AXIS));

        jpPuntosVida.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Puntos de vida", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N

        javax.swing.GroupLayout jpPuntosVidaLayout = new javax.swing.GroupLayout(jpPuntosVida);
        jpPuntosVida.setLayout(jpPuntosVidaLayout);
        jpPuntosVidaLayout.setHorizontalGroup(
            jpPuntosVidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );
        jpPuntosVidaLayout.setVerticalGroup(
            jpPuntosVidaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 23, Short.MAX_VALUE)
        );

        jpVida.add(jpPuntosVida);

        jpDerecha.add(jpVida);

        jpExperiencia.setLayout(new javax.swing.BoxLayout(jpExperiencia, javax.swing.BoxLayout.Y_AXIS));

        jpPuntosExperiencia.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Puntos de experiencia", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        javax.swing.GroupLayout jpPuntosExperienciaLayout = new javax.swing.GroupLayout(jpPuntosExperiencia);
        jpPuntosExperiencia.setLayout(jpPuntosExperienciaLayout);
        jpPuntosExperienciaLayout.setHorizontalGroup(
            jpPuntosExperienciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );
        jpPuntosExperienciaLayout.setVerticalGroup(
            jpPuntosExperienciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 124, Short.MAX_VALUE)
        );

        jpExperiencia.add(jpPuntosExperiencia);

        jpDerecha.add(jpExperiencia);

        jpMovimiento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Movimiento", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N

        javax.swing.GroupLayout jpMovimientoLayout = new javax.swing.GroupLayout(jpMovimiento);
        jpMovimiento.setLayout(jpMovimientoLayout);
        jpMovimientoLayout.setHorizontalGroup(
            jpMovimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpMovimientoLayout.setVerticalGroup(
            jpMovimientoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jpDerecha.add(jpMovimiento);

        jpAtaque.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ataque", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N

        javax.swing.GroupLayout jpAtaqueLayout = new javax.swing.GroupLayout(jpAtaque);
        jpAtaque.setLayout(jpAtaqueLayout);
        jpAtaqueLayout.setHorizontalGroup(
            jpAtaqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 326, Short.MAX_VALUE)
        );
        jpAtaqueLayout.setVerticalGroup(
            jpAtaqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );

        jpDerecha.add(jpAtaque);

        javax.swing.GroupLayout jpAccionLayout = new javax.swing.GroupLayout(jpAccion);
        jpAccion.setLayout(jpAccionLayout);
        jpAccionLayout.setHorizontalGroup(
            jpAccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );
        jpAccionLayout.setVerticalGroup(
            jpAccionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jpDerecha.add(jpAccion);

        jpBoton.setLayout(new javax.swing.BoxLayout(jpBoton, javax.swing.BoxLayout.X_AXIS));
        jpDerecha.add(jpBoton);

        jpPrincipal.add(jpDerecha);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpPrincipal, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpAccion;
    private javax.swing.JPanel jpAtaque;
    private javax.swing.JPanel jpBoton;
    private javax.swing.JPanel jpDerecha;
    private javax.swing.JPanel jpExperiencia;
    private javax.swing.JPanel jpImagenHeroe;
    private javax.swing.JPanel jpIzquierda;
    private javax.swing.JLayeredPane jpMapa;
    private javax.swing.JPanel jpMovimiento;
    private javax.swing.JPanel jpPrincipal;
    private javax.swing.JPanel jpPuntosExperiencia;
    private javax.swing.JPanel jpPuntosVida;
    private javax.swing.JPanel jpSecuencia0;
    private javax.swing.JPanel jpSecuencia1;
    private javax.swing.JPanel jpSecuencia2;
    private javax.swing.JPanel jpSecuencia3;
    private javax.swing.JPanel jpVida;
    private javax.swing.JScrollPane jsMapa;
    private javax.swing.JLabel lblImagenHeroe;
    private javax.swing.JLabel lblMapa;
    // End of variables declaration//GEN-END:variables

    public void setParent(Principal pp){
        this.principal=pp;
    }
    private void ajustarPantalla() {
        int w,h;
        widthScreen = Toolkit.getDefaultToolkit().getScreenSize().width;
        heightScreen = Toolkit.getDefaultToolkit().getScreenSize().height;
        
        //-------------------------
        //Panel izquierda
        //-------------------------  
        w = (int)((widthScreen*15)/20);
        h = (int)((heightScreen*12)/12);             
           
        jpIzquierda.setBackground(java.awt.Color.BLACK);
        jpIzquierda.setPreferredSize(new Dimension(w, h));
        //-------------------------
        //Panel derecha
        //-------------------------
        w = (int)((widthScreen*5)/20);
        h = (int)((heightScreen*12)/12);
        jpDerecha.setBackground(java.awt.Color.BLACK);
        jpDerecha.setPreferredSize(new Dimension(w, h));  
        
        
        this.dispose();
        setExtendedState(JFrame.MAXIMIZED_BOTH); 
        setUndecorated(true);
        
    }
    public void dibujarTablero(String rutaMapa){
        int w,h;

        
        //-------------------------
        //Tablero
        //-------------------------
        w = (int)((widthScreen*14)/20);       
        h = (int)((heightScreen*9)/12);
        
        Double tempX,tempY;
        



      
        icMapaOriginal = new ImageIcon(getClass().getResource("/com/dorn/assets/map/mapa_escalado.jpg"));
        icMapaEscalado= this.escalarImagen(w, h, "/com/dorn/assets/map/mapa_escalado.jpg");
        //lblMapa.setIcon();
        lblMapa.setIcon(icMapaEscalado);
        //lblMapa.getIcon().getIconWidth()
        factorEscaladoX= ((Double.parseDouble(Integer.toString(icMapaOriginal.getIconWidth())))/(Double.parseDouble(Integer.toString(lblMapa.getIcon().getIconWidth()))));
        factorEscaladoY = ((Double.parseDouble(Integer.toString(icMapaOriginal.getIconHeight())))/(Double.parseDouble(Integer.toString(lblMapa.getIcon().getIconHeight()))));        
        System.out.println("----------");
        System.out.println("FactorEscalaX: "+factorEscaladoX+"   FactorEscalaY: "+factorEscaladoY);
        System.out.println("----------");        
        lblMapa.setSize(w, h);
        
        
        jpMapa.setPreferredSize(new Dimension(w, h));
        jpMapa.setSize(w, h);
        jpMapa.setBackground(java.awt.Color.BLACK); 
        jpMapa.add(lblMapa,0);
       
    }
    public void dibujarSecuencia(ArrayList<Jugador> jugadores){
        this.jugadores=jugadores;
        jpSecuencia0.setLayout(new GridLayout(1, 2));
        jpSecuencia1.setLayout(new GridLayout(1, 2));
        jpSecuencia2.setLayout(new GridLayout(1, 4));
        jpSecuencia3.setLayout(new GridLayout(1, 5));
        JLabel jlDia =crearLabel("DÍA");
        jlDia.setBackground(Color.BLACK);
        jlDia.setForeground(Color.RED);
        jpSecuencia0.add(jlDia);
        jpSecuencia0.add(crearLabel("NOCHE"));        
        

        
        dibujarSecuenciaZorkal();

        
        //JButton jbTemp = new JButton(jugadores.get(0).getHeroe().getNombre()+" ("+jugadores.get(0).getNombre()+")");
        
        for(int i=0;i<jugadores.size();i++){
            JButton jbTemp = new JButton(jugadores.get(i).getHeroe().getNombre()+" ("+jugadores.get(i).getNombre()+")");
            jbTemp.setName("botonHeroe"+i);
            jbTemp.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    principal.sonido.sonidoClick();
                    botonHeroe_ActionPerformed(evt);
                }

            });
            jpSecuencia3.add(jbTemp);
            //jpSecuencia3.add(crearLabel(jugadores.get(i).getHeroe().getNombre()+" ("+jugadores.get(i).getNombre()+")"));
        }
    }
    public void dibujarSecuenciaHeroes() {
        //Secuencia 1
        jpSecuencia1.removeAll();
        jpSecuencia1.add(crearLabel("TURNO ZORKAL"));          
        JLabel jlHeroes =crearLabel("TURNO HEROES");
        jlHeroes.setBackground(Color.BLACK);
        jlHeroes.setForeground(Color.RED);        
        jpSecuencia1.add(jlHeroes);
        
        //Secuencia 2
        jpSecuencia2.removeAll();
        JLabel jlFase =crearLabel("BENDICIÓN"); 
        jlFase.setBackground(Color.BLACK);
        jlFase.setForeground(Color.RED);         
        jpSecuencia2.add(jlFase);        
        jpSecuencia2.add(crearLabel("MOVER"));
        jpSecuencia2.add(crearLabel("ATACAR"));
        jpSecuencia2.add(crearLabel("CURAR"));
        this.show();        
    }  
    public void dibujarSecuenciaZorkal() {
        //Secuencia 1
        jpSecuencia1.removeAll();
        JLabel jlZorkal =crearLabel("TURNO ZORKAL");
        jlZorkal.setBackground(Color.BLACK);
        jlZorkal.setForeground(Color.RED);        
        jpSecuencia1.add(jlZorkal);
        jpSecuencia1.add(crearLabel("TURNO HEROES"));  
        
        //Secuencia 2        
        jpSecuencia2.removeAll();
        JLabel jlFase =crearLabel("RITUAL"); 
        jlFase.setBackground(Color.BLACK);
        jlFase.setForeground(Color.RED);         
        jpSecuencia2.add(jlFase);
        jpSecuencia2.add(crearLabel("INVOCAR"));
        jpSecuencia2.add(crearLabel("MOVER"));
        jpSecuencia2.add(crearLabel("ATACAR"));
        this.show();        
    }    
    public void dibujarHeroe(){
        Heroe heroe = jugadores.get(this.jugadorActual).getHeroe();
        int w,h;
        cambiarNombreHeroe(heroe.getNombre(),String.valueOf(heroe.getNivel()));
        //-------------------------
        //Imagen Heroe
        //-------------------------          
        w = (int)((widthScreen*4)/20);
        h = (int)((heightScreen*4)/12);
        //lblImagenHeroe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagenHeroe.setIcon(this.escalarImagen(w, h, heroe.getRutaImagen()));        
        lblImagenHeroe.setSize(w, h);
        lblImagenHeroe.setBounds(((int)((heightScreen*2)/100)), ((int)((heightScreen*3)/100)), w, h);
        jpImagenHeroe.setPreferredSize(new Dimension(w, h));
        jpImagenHeroe.setSize(w,h);
        jpImagenHeroe.setBackground(Color.BLACK);
        //jpImagenHeroe.setBounds(0, 0, w, h);
        //jpImagenHeroe.setBackground(Color.green);

        //-------------------------
        //Vida
        //-------------------------
        jpPuntosVida.removeAll();
        jpVida.setBackground(Color.BLACK);
        jpPuntosVida.setBackground(Color.BLACK);

        
        w = (int)((widthScreen*4)/100);
        h = (int)((heightScreen*4)/100);
        
        jpPuntosVida.setLayout(new GridLayout(1, heroe.getVidaMax()));

        //Sangre disponible
        for(int i=0;i<heroe.getVida();i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/s_ok.png"));
            jpPuntosVida.add(s); 
        }
        //Sangre restante
        for(int i=0;i<(heroe.getVidaMax()-heroe.getVida());i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/s_no.png"));
            jpPuntosVida.add(s); 
        }  
        
        //-------------------------
        //Experiencia
        //-------------------------
        jpExperiencia.setVisible(true);
        jpPuntosExperiencia.removeAll();
        jpExperiencia.setBackground(Color.BLACK);
        jpPuntosExperiencia.setBackground(Color.BLACK);

        
        w = (int)((widthScreen*4)/100);
        h = (int)((heightScreen*4)/100);
        jpPuntosExperiencia.setLayout(new GridLayout(1, heroe.getExperienciaMax()));
        System.out.println(heroe.getNombre()+" nivel:"+heroe.getNivel());
        if(heroe.getNivel()<3){
            //Experiencia actual
            System.out.println("Exp act:"+heroe.getExperiencia());
            for(int i=0;i<heroe.getExperiencia();i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/e_ok.png"));
                jpPuntosExperiencia.add(s); 
            }
            //Experiencia total
            System.out.println("Exp tot:"+heroe.getExperienciaMax());
            for(int i=0;i<(heroe.getExperienciaMax()-heroe.getExperiencia());i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/e_no.png"));
                jpPuntosExperiencia.add(s); 
            }   
        }else{//Nivel máximo
            for(int i=0;i<7;i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/z_no.png"));
                jpPuntosExperiencia.add(s); 
            }  
        }
        //-------------------------
        //Movimiento
        //-------------------------   
        jpMovimiento.removeAll();
        jpMovimiento.setBackground(Color.BLACK);
        jpMovimiento.setLayout(new GridLayout(1, heroe.getMovimientoMax()));
        for(int i=0;i<heroe.getMovimiento();i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_ok.png"));
            jpMovimiento.add(s); 
        }    
        for(int i=0;i<(heroe.getMovimientoMax()-heroe.getMovimiento());i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_no.png"));
            jpMovimiento.add(s); 
        }
        //-------------------------
        //Ataque
        //-------------------------     
        jpAtaque.removeAll();
        jpAtaque.setBackground(Color.BLACK);
        jpAtaque.setLayout(new GridLayout(1, heroe.getAtaqueMax()));
        if(heroe.isAtaqueFisico()){//Ataque Físico
            cambiarTipoAtaque("Físico");
            for(int i=0;i<heroe.getAtaque();i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/ataque_fisico_ok.png"));
                jpAtaque.add(s); 
            }    
            for(int i=0;i<(heroe.getAtaqueMax()-heroe.getAtaque());i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/ataque_fisico_no.png"));
                jpAtaque.add(s); 
            }            
        }else{//Ataque Mágico
            cambiarTipoAtaque("Mágico");
            for(int i=0;i<heroe.getAtaque();i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/ataque_magico_ok.png"));
                jpAtaque.add(s); 
            }    
            for(int i=0;i<(heroe.getAtaqueMax()-heroe.getAtaque());i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/ataque_magico_no.png"));
                jpAtaque.add(s); 
            }    
        }
    } 
    public void dibujarCriattura(Criatura c){
        int w,h;
        cambiarNombreHeroe(c.getNombre());
        //-------------------------
        //Imagen Heroe
        //-------------------------          
        w = (int)((widthScreen*4)/20);
        h = (int)((heightScreen*4)/12);
        //lblImagenHeroe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImagenHeroe.setIcon(this.escalarImagen(w, h, c.getRutaCarta()));        
        lblImagenHeroe.setSize(w, h);
        lblImagenHeroe.setBounds(((int)((heightScreen*2)/100)), ((int)((heightScreen*3)/100)), w, h);
        jpImagenHeroe.setPreferredSize(new Dimension(w, h));
        jpImagenHeroe.setSize(w,h);
        //-------------------------
        //Vida
        //-------------------------
        jpPuntosVida.removeAll();
        jpVida.setBackground(Color.BLACK);
        jpPuntosVida.setBackground(Color.BLACK);

        
        w = (int)((widthScreen*4)/100);
        h = (int)((heightScreen*4)/100);
        
        jpPuntosVida.setLayout(new GridLayout(1, c.getVidaMax()));
        System.out.println("Criatura: "+c.getNombre());
        //Sangre disponible
        for(int i=0;i<c.getVida();i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/s_ok.png"));
            jpPuntosVida.add(s); 
        }
        //Sangre restante
        for(int i=0;i<(c.getVidaMax()-c.getVida());i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/s_no.png"));
            jpPuntosVida.add(s); 
        }     
        //-------------------------
        //Experiencia
        //-------------------------
        jpExperiencia.setVisible(false);
        //-------------------------
        //Movimiento
        //-------------------------   
        jpMovimiento.removeAll();
        jpMovimiento.setBackground(Color.BLACK);
        if(c.getMovimientoMax()>6){
            jpMovimiento.setLayout(new GridLayout(2, (c.getMovimientoMax()/2)));
        }else{
            jpMovimiento.setLayout(new GridLayout(1, c.getMovimientoMax()));
        }
        
        for(int i=0;i<c.getMovimiento();i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_ok.png"));
            jpMovimiento.add(s); 
        }    
        for(int i=0;i<(c.getMovimientoMax()-c.getMovimiento());i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_no.png"));
            jpMovimiento.add(s); 
        }   
        //-------------------------
        //Ataque
        //-------------------------   
        jpAtaque.removeAll();
        cambiarTipoAtaque("Físico");
        for(int i=0;i<c.getAtaque();i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/ataque_fisico_ok.png"));
            jpAtaque.add(s); 
        }    
        for(int i=0;i<(c.getAtaqueMax()-c.getAtaque());i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/ataque_fisico_no.png"));
            jpAtaque.add(s); 
        }           
   
    }
    public void actualizarMovimientoPersonaje(){
        
        int w = (int)((widthScreen*4)/100);
        int h = (int)((heightScreen*4)/100);
        //Remover elementos anteriores
        jpMovimiento.removeAll();

        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe = (Heroe)personajeActual;
            jpMovimiento.setLayout(new GridLayout(1, heroe.getMovimientoMax())); 
            for(int i=0;i<heroe.getMovimiento();i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_ok.png"));
                jpMovimiento.add(s); 
            }    
            for(int i=0;i<(heroe.getMovimientoMax()-heroe.getMovimiento());i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_no.png"));
                jpMovimiento.add(s); 
            }
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura = (Criatura)personajeActual;
            jpMovimiento.setLayout(new GridLayout(1, criatura .getMovimientoMax())); 
            for(int i=0;i<criatura .getMovimiento();i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_ok.png"));
                jpMovimiento.add(s); 
            }    
            for(int i=0;i<(criatura .getMovimientoMax()-criatura.getMovimiento());i++){
               JLabel s = new JLabel();
                s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_no.png"));
                jpMovimiento.add(s); 
            }            
        }
    }
    public ImageIcon escalarImagen(int w,int h, String url){
        ImageIcon ic = new ImageIcon(getClass().getResource(url));
        try{
        Image icRes = ic.getImage().getScaledInstance(w, h, Image.SCALE_SMOOTH);
        ic = new ImageIcon(icRes);
        }catch(Exception e){
            System.err.println("Daña URL -> "+url);
        }
        
        return ic;
    }  
    private JLabel crearLabel(String texto){
         JLabel j = new JLabel(texto);
         j.setFont(new java.awt.Font("Bitstream Charter", 3, 14));
         j.setForeground(Color.BLACK);
         j.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
         j.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
         return j;
    }    

    //Programar el movimiento
    private void br_1ActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getC1().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC1().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getC1().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC1().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();

    }      
    private void br_2ActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getC2().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC2().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getC2().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC2().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();
    }      
    private void br_3ActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getC3().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC3().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getC3().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC3().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();
    }      
    private void br_4ActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getC4().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC4().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getC4().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getC4().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();
    }   
    private void br_upActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getArriba().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getArriba().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getArriba().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getArriba().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();
    }
    private void br_rightActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getDerecha().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getDerecha().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getDerecha().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getDerecha().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();
    }     
    private void br_downActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getAbajo().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getAbajo().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getAbajo().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getAbajo().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();
    }    
    private void br_leftActionPerformed(ActionEvent evt) {
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe =(Heroe)personajeActual;
            Casilla oldCasilla = ((Ficha)heroe.getFicha()).getCasilla();
            if(!oldCasilla.getIzquierda().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getIzquierda().ocupar((Ficha)heroe.getFicha());
                heroe.mover();
            }
            
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            Casilla oldCasilla = ((Ficha)criatura.getFicha()).getCasilla();
            if(!oldCasilla.getIzquierda().esOcupada()){
                oldCasilla.desocupar();
                oldCasilla.getIzquierda().ocupar((Ficha)criatura.getFicha());
                criatura.mover();
            }            
        }
        efectuarMovimiento();
}
public void efectuarMovimiento(){
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe = (Heroe)personajeActual;
            //((Ficha)heroe.getFicha()).setCasilla(heroe.getCasilla());
            if(esEscalado){
                dibujarFichaEnTablero((JLabel)(((Ficha)heroe.getFicha()).getFiguraEscalada()), ((Ficha)heroe.getFicha()).getCasilla().getX(), ((Ficha)heroe.getFicha()).getCasilla().getY());
            }else{

                dibujarFichaEnTablero((JLabel)(((Ficha)heroe.getFicha()).getFiguraOriginal()), ((Ficha)heroe.getFicha()).getCasilla().getX(), ((Ficha)heroe.getFicha()).getCasilla().getY());
                posicionarCamara(heroe.getFicha());
            }        
            actualizarMovimientoPersonaje();
            dibujarMover();
            principal.sonido.sonidoMover();
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura =(Criatura)personajeActual;
            if(esEscalado){
                dibujarFichaEnTablero((JLabel)(((Ficha)criatura.getFicha()).getFiguraEscalada()), ((Ficha)criatura.getFicha()).getCasilla().getX(), ((Ficha)criatura.getFicha()).getCasilla().getY());
            }else{

                dibujarFichaEnTablero((JLabel)(((Ficha)criatura.getFicha()).getFiguraOriginal()), ((Ficha)criatura.getFicha()).getCasilla().getX(), ((Ficha)criatura.getFicha()).getCasilla().getY());
                posicionarCamara(criatura.getFicha());
            }  
            actualizarMovimientoPersonaje();
            dibujarMoverCriatura();
            principal.sonido.sonidoMover();
        }
        
        this.show();        
    }


    private void cambiarNombreHeroe(String nombre,String nivel) {
        jpImagenHeroe.setBorder(javax.swing.BorderFactory.createTitledBorder(null, nombre+" - nivel:"+nivel, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 24), new java.awt.Color(254, 254, 254))); // NOI18N        
    }
    private void cambiarNombreHeroe(String nombre) {
        jpImagenHeroe.setBorder(javax.swing.BorderFactory.createTitledBorder(null, nombre, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 24), new java.awt.Color(254, 254, 254))); // NOI18N        
    }    
    private void cambiarTipoAtaque(String nombre){
        jpAtaque.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ataque "+nombre, javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N
    }
    


    public void dibujarFichasHeroes(Mapa m) {
        this.mapa=m;
        Casilla[] argos = mapa.getArgos();
        
        for(int i=1;i<jugadores.size();i++){   
                Ficha fichaHeroe = new Ficha();
                jugadores.get(i).getHeroe().setFicha(fichaHeroe);                
                fichaHeroe.setOcupante(jugadores.get(i).getHeroe());
                argos[i-1].ocupar(fichaHeroe);
                
                JLabel jl = new JLabel();
                JLabel jlOriginal = new JLabel();
                jl.setIcon(escalarImagen(((widthScreen*2)/100), ((heightScreen*4)/100), jugadores.get(i).getHeroe().getRutaSprite()));  
                ImageIcon icSprite = new ImageIcon(getClass().getResource(jugadores.get(i).getHeroe().getRutaSprite()));
                //jlOriginal.setIcon(escalarImagen((icSprite.getIconWidth()*5)/10,(icSprite.getIconHeight()*6)/10,jugadores.get(i).getHeroe().getRutaSprite()));
                jlOriginal.setIcon(escalarImagen((icSprite.getIconWidth()*5)/10,(icSprite.getIconHeight()*8)/20,jugadores.get(i).getHeroe().getRutaSprite()));
                //principal.addFichasOriginales(jlOriginal);
                //principal.addFichasEscaladas(jl);
                fichaHeroe.setCasilla(argos[i-1]);
                fichaHeroe.setFiguraOriginal(jlOriginal);
                fichaHeroe.setFiguraEscalada(jl);
                
                if(fichaHeroe == null){
                    System.out.println("Ficha heroe es NULL");
                }
                if(principal == null){
                    System.out.println("Principal es NULL");
                }

                principal.addFicha(fichaHeroe);
                //dibujarFichaEnTablero(jl, argos[i-1].getX(), argos[i-1].getY());
                /*jl.setBounds(argos[i-1].getX(), argos[i-1].getY(),
                    jl.getIcon().getIconWidth(),
                    jl.getIcon().getIconHeight());*/
                //jpMapa.add(jl,1,0);
        }
        
    }
    
    public void dibujarFichaZorkal() {
        //----------
        guardian =(Zorkal)jugadores.get(0).getHeroe();
        Ficha fichaHeroe = new Ficha();
        guardian.setFicha(fichaHeroe);
        
        Casilla[] trono=mapa.getTrono();
        trono[6].ocupar(fichaHeroe);        
                                
        JLabel jl = new JLabel();
        JLabel jlOriginal = new JLabel();
        jl.setIcon(escalarImagen(((widthScreen*2)/100), ((heightScreen*4)/100), jugadores.get(0).getHeroe().getRutaSprite()));                                
        jlOriginal.setIcon(new ImageIcon(jugadores.get(0).getHeroe().getRutaSprite()));
        //principal.addFichasOriginales(jlOriginal);
        //principal.addFichasEscaladas(jl);
        fichaHeroe.setCasilla(trono[6]);
        fichaHeroe.setFiguraOriginal(jlOriginal);
        fichaHeroe.setFiguraEscalada(jl);

        //jugadores.get(0).getHeroe().setFicha(fichaHeroe);
        principal.addFicha(fichaHeroe);        
    }
    
    public double getFactorEscaladoX() {
        return factorEscaladoX;
    }

    public double getFactorEscaladoY() {
        return factorEscaladoY;
    }    

    
    private void botonHeroe_ActionPerformed(ActionEvent evt) {
        String nombreHeroe =((JButton)evt.getSource()).getName();
        nombreHeroe=nombreHeroe.substring(10);  
        String rutaImagen =jugadores.get(Integer.parseInt(nombreHeroe)).getHeroe().getRutaCarta();
        Carta carta = new Carta(this, rutaImagen,5);
        carta.setTitle(jugadores.get(Integer.parseInt(nombreHeroe)).getNombre());
        carta.setVisible(true);
    }   

    public int getJugadorActual() {
        return jugadorActual;
    }

    public void setJugadorActual(int jugadorActual) {
        //Activar jugador
        jpSecuencia3.getComponent(jugadorActual).setBackground(Color.BLACK);
        jpSecuencia3.getComponent(jugadorActual).setForeground(Color.red);
        //Desactivar
        if(jugadorActual==0){
            jpSecuencia3.getComponent(jugadores.size()-1).setBackground(new javax.swing.plaf.ColorUIResource(238, 238, 238));
            jpSecuencia3.getComponent(jugadores.size()-1).setForeground(new javax.swing.plaf.ColorUIResource(51, 51, 51));            
        }else if(jugadorActual==1){
            jpSecuencia3.getComponent(0).setBackground(new javax.swing.plaf.ColorUIResource(238, 238, 238));
            jpSecuencia3.getComponent(0).setForeground(new javax.swing.plaf.ColorUIResource(51, 51, 51));            
            
            jpSecuencia3.getComponent(jugadores.size()-1).setBackground(new javax.swing.plaf.ColorUIResource(238, 238, 238));
            jpSecuencia3.getComponent(jugadores.size()-1).setForeground(new javax.swing.plaf.ColorUIResource(51, 51, 51)); 
        }else{
            jpSecuencia3.getComponent(jugadorActual-1).setBackground(new javax.swing.plaf.ColorUIResource(238, 238, 238));
            jpSecuencia3.getComponent(jugadorActual-1).setForeground(new javax.swing.plaf.ColorUIResource(51, 51, 51)); 
        }
        
        this.jugadorActual = jugadorActual;
    }

    public void dibujarRitual(){
        Zorkal zorkal = (Zorkal)jugadores.get(jugadorActual).getHeroe();
        limpiarContenedores();
        jpAccion.setLayout(new GridLayout(3, 2));
        int cantRit=0;
        for(Ritual ritual: zorkal.getRituales()){
            cantRit++;
            JButton jr = new JButton(cantRit+"."+ritual.getNombre());
            jr.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    principal.sonido.sonidoClick();
                    dibujarCartaRitualActionPerformed(evt);
                }
            });
            
            jpAccion.add(jr);

                
        }
        JButton jboton = new JButton("Finalizar");
        jboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principal.sonido.sonidoClick();
                jugarInvocarctionPerformed(evt);
            }
        });
        jpBoton.add(jboton);
        jpAccion.setBackground(Color.BLACK);
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rituales", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N
        this.show();
    } 
    public void dibujarInvocar(){
        guardian = (Zorkal)jugadores.get(jugadorActual).getHeroe();
        int numCriaturas = guardian.getCriaturas().size();
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Invocar", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N
        limpiarContenedores();
       if(numCriaturas !=0){             
            jpAccion.setLayout(new GridLayout((numCriaturas/2), 2));
            int cont=0;
            for(Criatura criatura:guardian.getCriaturas()){
                cont++;
                JButton jc = new JButton(cont+". "+criatura.getNombre());
                jc.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {                        
                        principal.sonido.sonidoClick();
                        seleccionarCriaturaActionPerformed(evt);
                    }
                });
                jpAccion.add(jc);
            }
       }else{
           JButton jboton = new JButton("Finalizar");
           jboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugarMoverZorkalActionPerformed(evt);
            }
            
            });
           jpBoton.add(jboton);
       }  
        //----------Pasar secuencia a invocar
        desactivarElementoSecuencia((JLabel)jpSecuencia2.getComponent(0));
        activarElementoSecuencia((JLabel)jpSecuencia2.getComponent(1));

        
        this.show();
        
    }  
    private void seleccionarCriaturaActionPerformed(ActionEvent evt) {
        JButton botonOrigen = (JButton)evt.getSource();
        indiceCriaturaInicial = Integer.parseInt(botonOrigen.getText().charAt(0)+"")-1;
        Carta window = new Carta(this, guardian.getCriatura(indiceCriaturaInicial).getRutaCarta(),3);
        window.setVisible(true);
    }
    private void dibujarCartaRitualActionPerformed(ActionEvent evt) {
       Zorkal zorkal = (Zorkal)jugadores.get(0).getHeroe();
        JButton botonOrigen = (JButton)evt.getSource();
        int indiceRitual = Integer.parseInt(botonOrigen.getText().charAt(0)+"")-1;
        
        Carta window = new Carta(this, zorkal.getRitual(indiceRitual).getRutaImagen(),1);
        window.setVisible(true);
    }    
 
    public void invocarCriaturaInicial(){
        Criatura cri = guardian.getCriaturas().remove(indiceCriaturaInicial);
        int cantidadCriaturasInvocada = guardian.getCriaturasInvocada().size();
        Casilla cas= mapa.getInvocacionInicial()[cantidadCriaturasInvocada];
        
        //Se crean las imagenes
        JLabel imOr= new JLabel();
        JLabel imEs = new JLabel();
        ImageIcon ic= new ImageIcon(getClass().getResource(cri.getRutaSprite()));
        //imOr.setIcon(escalarImagen(ic.getIconWidth(),ic.getIconHeight(), cri.getRutaSprite()));  
        imEs.setIcon(escalarImagen(((widthScreen*2)/100), ((heightScreen*4)/100), cri.getRutaSprite())); 
        imOr.setIcon(escalarImagen((ic.getIconWidth()*5)/10, (ic.getIconHeight()*5)/10, cri.getRutaSprite()));
        
        //Se crea la ficha
        Ficha f = new Ficha();
        f.setCasilla(cas);
        cas.ocupar(f);
        f.setFiguraOriginal(imOr);
        f.setFiguraEscalada(imEs);

        //Criatura posee ficha
        cri.setFicha(f);
        f.setOcupante(cri);
        //Guardian posee criatura
        guardian.addCriaturaInvocada(cri);
        //Principal posee fichas
        principal.addFicha(f);
        
        //La dibujamos en el tablero        
        dibujarFichaEnTablero((JLabel)f.getFiguraEscalada(), f.getCasilla().getX(), f.getCasilla().getY());
        
        //Sonido de invocacion
        if(cri.getNombre().equals("Rata")){
            principal.sonido.sonidoRata();
        }else if(cri.getNombre().equals("Engendro")){
            principal.sonido.sonidoEngendro();
        }else if(cri.getNombre().equals("Esqueleto")){
            principal.sonido.sonidoEsqueleto();
        }else if(cri.getNombre().equals("Zombi")){
            principal.sonido.sonidoZombi();
        }else if(cri.getNombre().equals("Gorgona")){
            principal.sonido.sonidoGorgona();
        }else if(cri.getNombre().equals("Momia")){
            principal.sonido.sonidoMomia();
        }else if(cri.getNombre().equals("Fantasma")){
            principal.sonido.sonidoFantasma();
        }else if(cri.getNombre().equals("Vampiro")){
            principal.sonido.sonidoVampiro();
        }
        
        //Si ya invocó todas las fichas
        if(guardian.getCriaturas().size() ==0){
            //Espere

             limpiarContenedores();
             this.show();
             //dibujarInvocar();
            new Thread(){
                public void run() {         
                    try {
                        Thread.sleep(2000);
                        //Pasa a la siguiente fase
                         principal.jugarMoverGuardian();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.start();             


        }else{
            //Reestablecemos las figuras que falten
            dibujarInvocar();
        }
        
        
    }
    
    public void dibujarMover(){
        int w = (int)((widthScreen*4)/100);
        int h = (int)((heightScreen*4)/100);
        limpiarContenedores();
        jpAccion.setLayout(new GridLayout(3, 3));
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mover", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N
        //-------------------------
        //Mover
        //------------------------- 
        
        //-----Parte superior
        br_4 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_4.png"));
        jpAccion.add(br_4);

        br_up = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_up.png"));
        jpAccion.add(br_up);

        br_1 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_1.png"));
        jpAccion.add(br_1); 
        
        //-----Parte central
        br_left = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_left.png"));
        jpAccion.add(br_left);  

        br_0 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_center.png"));
        br_0.setEnabled(false);
        jpAccion.add(br_0);  

        br_right = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_right.png"));
        jpAccion.add(br_right); 
        
        //-----Parte inferior        
        br_3 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_3.png"));
        jpAccion.add(br_3); 

        br_down = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_down.png"));
        jpAccion.add(br_down);          

        br_2 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_2.png"));
        jpAccion.add(br_2);   
        
        //---------Se establecen los Listener
        establecerListener();

        verificarCasillas();
        
        JButton jboton = new JButton("Finalizar Mover");
      
        jboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principal.sonido.sonidoClick();
                if(jugadorActual==0){
                    jugarAtacarActionPerformed(evt);
                }else{
                    principal.jugarMoverHeroes(jugadorActual+1);
                }
                
            }
        });
        jpBoton.add(jboton);   
        
        //----------Pasar secuencia a Mover
        desactivarElementoSecuencia((JLabel)jpSecuencia2.getComponent(1));
        activarElementoSecuencia((JLabel)jpSecuencia2.getComponent(2));
        
        this.show();
    }
    public void dibujarMoverZorkal(){
        dibujarMover();
        //Funcion para mover criaturas
    }
    public void dibujarMoverCriatura(){
        int w = (int)((widthScreen*4)/100);
        int h = (int)((heightScreen*4)/100);
        limpiarContenedores();
        jpAccion.setLayout(new GridLayout(3, 3));
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mover", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N
        //-------------------------
        //Mover
        //------------------------- 
        
        //-----Parte superior
        br_4 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_4.png"));
        jpAccion.add(br_4);

        br_up = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_up.png"));
        jpAccion.add(br_up);

        br_1 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_1.png"));
        jpAccion.add(br_1); 
        
        //-----Parte central
        br_left = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_left.png"));
        jpAccion.add(br_left);  

        br_0 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_center.png"));
        br_0.setEnabled(false);
        jpAccion.add(br_0);  

        br_right = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_right.png"));
        jpAccion.add(br_right); 
        
        //-----Parte inferior        
        br_3 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_3.png"));
        jpAccion.add(br_3); 

        br_down = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_down.png"));
        jpAccion.add(br_down);          

        br_2 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_2.png"));
        jpAccion.add(br_2);  
        
        //---------Se establecen los Listener
        establecerListener();

        verificarCasillas();
        
        JButton jboton = new JButton("Finalizar Mover");
      
        jboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principal.sonido.sonidoClick();
                principal.jugarMoverCriaturas(indiceCriaturaActual+1);                
            }
        });
        jpBoton.add(jboton);
        
        
        this.show();
    }
    public void establecerListener(){
        br_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_1ActionPerformed(evt);
            }
        });        
        br_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_2ActionPerformed(evt);
            }
        });        
        br_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_3ActionPerformed(evt);
            }
        });        
        br_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_4ActionPerformed(evt);
            }
        });
        br_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_upActionPerformed(evt);
            }
        });  
        br_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_rightActionPerformed(evt);
            }
        });   
        br_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_downActionPerformed(evt);
            }
        });  
        br_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_leftActionPerformed(evt);
            }
        });        
    }
    public void establecerListenerAtaque(){
        br_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ar_1ActionPerformed(evt);
            }
        });        
        br_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ar_2ActionPerformed(evt);
            }
        });        
        br_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ar_3ActionPerformed(evt);
            }
        });        
        br_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ar_4ActionPerformed(evt);
            }
        });
        br_up.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                ar_upActionPerformed(evt);
            }
        });  
        br_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                ar_rightActionPerformed(evt);
            }
        });   
        br_down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                ar_downActionPerformed(evt);
            }
        });  
        br_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                ar_leftActionPerformed(evt);
            }
        });        
    }  
/*----------------------
 -------------------------  
 -------------------------  
 ------------------ */ 
    //Programar el alcance del ataque
    private void ar_1ActionPerformed(ActionEvent evt) {
        Casilla oldCasilla = principal.power.getCasillaObjetivo();
        
        if( !oldCasilla.getC1().esOcupada() ){
            principal.power.setCasillaObjetivo(oldCasilla.getC1());                
            principal.power.setAlcance(
            principal.power.getAlcance()-1
            );   
            ((JButton)jpBoton.getComponent(0)).setEnabled(false);
        }else{

            if(oldCasilla.getC1().getFicha().getOcupante().isIsHeroe()
                    ^
                    personajeActual.isIsHeroe()){
                //Casilla origen: Héroe
                //Casilla destino: Criatura
                //Debe atacar a la criatura  
                principal.power.setCasillaObjetivo(oldCasilla.getC1());                
                principal.power.setAlcance(
                    0
                );
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(true);                

            }else{                
                //Casilla origen: Héroe
                //Casilla destino: Héroe
                //Puede atacar a través de un héroe
                principal.power.setCasillaObjetivo(oldCasilla.getC1());                
                principal.power.setAlcance(
                    principal.power.getAlcance()-1
                );    
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(false);
            }
        }            
        efectuarMovimientoAtaque();
    }  
    private void ar_2ActionPerformed(ActionEvent evt) {
        Casilla oldCasilla = principal.power.getCasillaObjetivo();
        
        if( !oldCasilla.getC2().esOcupada() ){
            principal.power.setCasillaObjetivo(oldCasilla.getC2());                
            principal.power.setAlcance(
            principal.power.getAlcance()-1
            );   
            ((JButton)jpBoton.getComponent(0)).setEnabled(false);
        }else{

            if(oldCasilla.getC2().getFicha().getOcupante().isIsHeroe()
                    ^
                    personajeActual.isIsHeroe()){
                //Casilla origen: Héroe
                //Casilla destino: Criatura
                //Debe atacar a la criatura  
                principal.power.setCasillaObjetivo(oldCasilla.getC2());                
                principal.power.setAlcance(
                    0
                );
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(true);                

            }else{                
                //Casilla origen: Héroe
                //Casilla destino: Héroe
                //Puede atacar a través de un héroe
                principal.power.setCasillaObjetivo(oldCasilla.getC2());                
                principal.power.setAlcance(
                    principal.power.getAlcance()-1
                );    
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(false);
            }
        }            
        efectuarMovimientoAtaque();
    }   
    private void ar_3ActionPerformed(ActionEvent evt) {
        Casilla oldCasilla = principal.power.getCasillaObjetivo();
        
        if( !oldCasilla.getC3().esOcupada() ){
            principal.power.setCasillaObjetivo(oldCasilla.getC3());                
            principal.power.setAlcance(
            principal.power.getAlcance()-1
            );   
            ((JButton)jpBoton.getComponent(0)).setEnabled(false);
        }else{

            if(oldCasilla.getC3().getFicha().getOcupante().isIsHeroe()
                    ^
                    personajeActual.isIsHeroe()){
                //Casilla origen: Héroe
                //Casilla destino: Criatura
                //Debe atacar a la criatura  
                principal.power.setCasillaObjetivo(oldCasilla.getC3());                
                principal.power.setAlcance(
                    0
                );
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(true);                

            }else{                
                //Casilla origen: Héroe
                //Casilla destino: Héroe
                //Puede atacar a través de un héroe
                principal.power.setCasillaObjetivo(oldCasilla.getC3());                
                principal.power.setAlcance(
                    principal.power.getAlcance()-1
                );    
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(false);
            }
        }            
        efectuarMovimientoAtaque();
    }
    private void ar_4ActionPerformed(ActionEvent evt) {
        Casilla oldCasilla = principal.power.getCasillaObjetivo();
        
        if( !oldCasilla.getC4().esOcupada() ){
            principal.power.setCasillaObjetivo(oldCasilla.getC4());                
            principal.power.setAlcance(
            principal.power.getAlcance()-1
            );   
            ((JButton)jpBoton.getComponent(0)).setEnabled(false);
        }else{

            if(oldCasilla.getC4().getFicha().getOcupante().isIsHeroe()
                    ^
                    personajeActual.isIsHeroe()){
                //Casilla origen: Héroe
                //Casilla destino: Criatura
                //Debe atacar a la criatura  
                principal.power.setCasillaObjetivo(oldCasilla.getC4());                
                principal.power.setAlcance(
                    0
                );
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(true);                

            }else{                
                //Casilla origen: Héroe
                //Casilla destino: Héroe
                //Puede atacar a través de un héroe
                principal.power.setCasillaObjetivo(oldCasilla.getC4());                
                principal.power.setAlcance(
                    principal.power.getAlcance()-1
                );    
                //Get atacar button
                ((JButton)jpBoton.getComponent(0)).setEnabled(false);
            }
        }            
        efectuarMovimientoAtaque();
    }     
/*----------------------
 -------------------------  
 -------------------------  
 ------------------ */    
    private void dibujarAtacarCriatura() {
        Avatar c = personajeActual;
        limpiarContenedores();
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Habilidades", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N        
        jpAccion.setLayout(new GridLayout(1, 2));
        JPanel habActiva = new JPanel();
        JPanel habPasiva = new JPanel();
        jpAccion.add(habActiva);
        jpAccion.add(habPasiva);
        habActiva.setLayout(new BoxLayout(habActiva,javax.swing.BoxLayout.Y_AXIS ));
        habPasiva.setLayout(new BoxLayout(habPasiva,javax.swing.BoxLayout.Y_AXIS ));
        habActiva.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Activas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Bitstream Charter", 1, 18)));
        habPasiva.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pasivas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Bitstream Charter", 1, 18)));
        habActiva.setBackground(Color.BLACK);
        habPasiva.setBackground(Color.BLACK);
        //-------------------------
        //Habilidad
        //-------------------------
       
        for(Habilidad hab:c.getHabilidad()){
            JButton boton = new JButton(hab.getNombre());
            boton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    principal.sonido.sonidoClick();
                    principal.power.resolverHabilidad(c, hab);
                }
            });
            if(hab.isCuestaAtaque()){
                //Activa 
                habActiva.add(boton);                
            }else{
                //Pasiva
                habPasiva.add(boton);
            }
        }     
        
        //-------Panel de acciones
        JButton terminar = new JButton("Finalizar Ataque");
        jpBoton.add(terminar);
        
        terminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principal.sonido.sonidoClick();
                principal.jugarAtacarCriaturas(indiceCriaturaActual+1);
            }
        });        
        
        this.show();
    }
    public void dibujarAtacarZorkal(){
        dibujarAtacar();
    }    
    public void dibujarAtacar(){
        Heroe heroe = jugadores.get(jugadorActual).getHeroe();
        limpiarContenedores();
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Habilidades", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N        
        jpAccion.setLayout(new GridLayout(1, 2));
        JPanel habActiva = new JPanel();
        JPanel habPasiva = new JPanel();
        jpAccion.add(habActiva);
        jpAccion.add(habPasiva);
        habActiva.setLayout(new BoxLayout(habActiva,javax.swing.BoxLayout.Y_AXIS ));
        habPasiva.setLayout(new BoxLayout(habPasiva,javax.swing.BoxLayout.Y_AXIS ));
        habActiva.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Activas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Bitstream Charter", 1, 18)));
        habPasiva.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pasivas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Bitstream Charter", 1, 18)));
        habActiva.setBackground(Color.BLACK);
        habPasiva.setBackground(Color.BLACK);
        //-------------------------
        //Habilidad
        //-------------------------
       
        for(Habilidad hab:heroe.getHabilidad()){
            JButton boton = new JButton(hab.getNombre());
            //boton.set
            boton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    principal.sonido.sonidoClick();
                    principal.power.resolverHabilidad(heroe, hab);                    
                }
            });
            if(hab.isCuestaAtaque()){
                //Activa 
                habActiva.add(boton);                
            }else{
                //Pasiva
                habPasiva.add(boton);
            }
        }     
        
        JButton jboton = new JButton();
        if(jugadorActual==0){
            jboton.setText("Finalizar Turno");
        }else{
            jboton.setText("Finalizar Ataque");
        }
      
        jboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principal.sonido.sonidoClick();
                if(jugadorActual==0){
                    finalizarTurnoZorkalActionPerformed(evt);
                }else{
                    principal.jugarAtacarHeroes(jugadorActual+1);
                }
                
            }
        });
        jpBoton.add(jboton);   
        
        //----------Pasar secuencia a Atacar
        desactivarElementoSecuencia((JLabel)jpSecuencia2.getComponent(2));
        activarElementoSecuencia((JLabel)jpSecuencia2.getComponent(3));     
        
        this.show();
    }
    
    public void dibujarAtacarHabilidad(Avatar cliente, Habilidad hab) {
        limpiarContenedores();
        jpMovimiento.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alcance", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N
        actualizarAlcanceAtaque();        
        dibujarAtacarBotones();
    }    
    public void actualizarAlcanceAtaque(){
        int w = (int)((widthScreen*4)/100);
        int h = (int)((heightScreen*4)/100);
        //Remover elementos anteriores
        jpMovimiento.removeAll();
        //Poner los elementos visuales de alcance
        jpMovimiento.setLayout(new GridLayout(1, principal.power.getAlcanceMax())); 
        for(int i=0; i< principal.power.getAlcance(); i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_ok.png"));
            jpMovimiento.add(s); 
        }    
        for(int i=0;i<(principal.power.getAlcanceMax()-principal.power.getAlcance());i++){
           JLabel s = new JLabel();
            s.setIcon(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/m_no.png"));
            jpMovimiento.add(s); 
        }    
    }
    public void dibujarAtacarBotones(){
        int w = (int)((widthScreen*4)/100);
        int h = (int)((heightScreen*4)/100);
        limpiarContenedores();
        jpAccion.setLayout(new GridLayout(3, 3));
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Seleccionar Objetivo", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N
        //-------------------------
        //Mover
        //------------------------- 
        
        //-----Parte superior
        br_4 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_4.png"));
        jpAccion.add(br_4);

        br_up = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_up.png"));
        jpAccion.add(br_up);

        br_1 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_1.png"));
        jpAccion.add(br_1); 
        
        //-----Parte central
        br_left = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_left.png"));
        jpAccion.add(br_left);  

        br_0 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_center.png"));
        br_0.setEnabled(false);
        jpAccion.add(br_0);  

        br_right = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_right.png"));
        jpAccion.add(br_right); 
        
        //-----Parte inferior        
        br_3 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_3.png"));
        jpAccion.add(br_3); 

        br_down = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_down.png"));
        jpAccion.add(br_down);          

        br_2 = new JButton(this.escalarImagen(w, h, "/com/dorn/assets/heroe/img/r_2.png"));
        jpAccion.add(br_2);   
        
        //---------Se establecen los Listener
        establecerListenerAtaque();

        verificarAlcanceDisponible();
        
        JButton jbotonCancelar = new JButton("Cancelar");
        JButton jbotonAtacar = new JButton("Atacar");
      
        jbotonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                principal.sonido.sonidoClick();
                dibujarAtacarCriatura();
            }
        });
        jbotonAtacar.setEnabled(false);
        jpBoton.add(jbotonAtacar);   
        jpBoton.add(jbotonCancelar);   
        
        //----------Pasar secuencia a Mover
        desactivarElementoSecuencia((JLabel)jpSecuencia2.getComponent(1));
        activarElementoSecuencia((JLabel)jpSecuencia2.getComponent(2));
        
        this.show();        
    }
    
    //-----------------------------------
    public void verificarCasillas(){
        Casilla casillaTemp= null;
        int movimientosDisponibles=0;
        if(personajeActual.getClass().getSuperclass().getName().contains("Heroe")){
            Heroe heroe = (Heroe)personajeActual;
            casillaTemp = ((Ficha)heroe.getFicha()).getCasilla();
            movimientosDisponibles=heroe.getMovimiento();
        }else if(personajeActual.getClass().getSuperclass().getName().contains("Criatura")){
            Criatura criatura = (Criatura)personajeActual;
            casillaTemp = ((Ficha)criatura.getFicha()).getCasilla();  
            movimientosDisponibles=criatura.getMovimiento();
        }
        
        
       if(movimientosDisponibles==0){//No puede mover
           br_0.setEnabled(false);
           br_1.setEnabled(false);
           br_2.setEnabled(false);
           br_3.setEnabled(false);
           br_4.setEnabled(false);
           br_up.setEnabled(false);
           br_left.setEnabled(false);
           br_right.setEnabled(false);
           br_down.setEnabled(false);
       }else{ 
        if((casillaTemp.getArriba() == null) || (casillaTemp.getArriba().esOcupada())){
            br_up.setEnabled(false);
        }else{
            br_up.setEnabled(true);
        }
        if(casillaTemp.getDerecha() == null || (casillaTemp.getDerecha().esOcupada())){
            br_right.setEnabled(false);
        }else{
            br_right.setEnabled(true);
        }  
        if(casillaTemp.getAbajo() == null || (casillaTemp.getAbajo().esOcupada())){
            br_down.setEnabled(false);
        }else{
            br_down.setEnabled(true);
        }  
        if(casillaTemp.getIzquierda()== null || (casillaTemp.getIzquierda().esOcupada())){
            br_left.setEnabled(false);
        }else{
            br_left.setEnabled(true);
        } 
        if(casillaTemp.getC1()== null || (casillaTemp.getC1().esOcupada())){
            br_1.setEnabled(false);
        }else{
            br_1.setEnabled(true);
        }  
        if(casillaTemp.getC2()== null || (casillaTemp.getC2().esOcupada())){
            br_2.setEnabled(false);
        }else{
            br_2.setEnabled(true);
        }       
        if(casillaTemp.getC3()== null || (casillaTemp.getC3().esOcupada())){
            br_3.setEnabled(false);
        }else{
            br_3.setEnabled(true);
        }   
        if(casillaTemp.getC4()== null || (casillaTemp.getC4().esOcupada())){
            br_4.setEnabled(false);
        }else{
            br_4.setEnabled(true);
        }    
       } 
    }
    
    public void verificarAlcanceDisponible(){
       int movimientosDisponibles = principal.power.getAlcance();
       Casilla casillaTemp = personajeActual.getFicha().getCasilla();
       if(movimientosDisponibles==0){//No puede mover
           br_0.setEnabled(false);
           br_1.setEnabled(false);
           br_2.setEnabled(false);
           br_3.setEnabled(false);
           br_4.setEnabled(false);
           br_up.setEnabled(false);
           br_left.setEnabled(false);
           br_right.setEnabled(false);
           br_down.setEnabled(false);
       }else{ 
        if((casillaTemp.getArriba() == null) ){
            br_up.setEnabled(false);
        }else{
            br_up.setEnabled(true);
        }
        if(casillaTemp.getDerecha() == null ){
            br_right.setEnabled(false);
        }else{
            br_right.setEnabled(true);
        }  
        if(casillaTemp.getAbajo() == null ){
            br_down.setEnabled(false);
        }else{
            br_down.setEnabled(true);
        }  
        if(casillaTemp.getIzquierda()== null ){
            br_left.setEnabled(false);
        }else{
            br_left.setEnabled(true);
        } 
        if(casillaTemp.getC1()== null ){
            br_1.setEnabled(false);
        }else{
            br_1.setEnabled(true);
        }  
        if(casillaTemp.getC2()== null ){
            br_2.setEnabled(false);
        }else{
            br_2.setEnabled(true);
        }       
        if(casillaTemp.getC3()== null ){
            br_3.setEnabled(false);
        }else{
            br_3.setEnabled(true);
        }   
        if(casillaTemp.getC4()== null ){
            br_4.setEnabled(false);
        }else{
            br_4.setEnabled(true);
        }    
       }         
    }
    
    public void dibujarBendicion() {
        Heroe heroe =jugadores.get(jugadorActual).getHeroe();
        limpiarContenedores();
        jpAccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bendición", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 1, 14), new java.awt.Color(254, 254, 254))); // NOI18N        
        //jpAccion.setLayout(new BoxLayout(jpAccion, javax.swing.BoxLayout.Y_AXIS));
        jpAccion.setLayout(new GridLayout(1, 1));
        JButton jr = new JButton(heroe.getBendicion().getNombre());
        jr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //jugarMoverHeroesPerformed(evt);
                principal.sonido.sonidoClick();
                dibujarCartaBendicionActionPerformed(evt);
            }
        });     
        jpAccion.add(jr);
        
        JButton jboton = new JButton("Finalizar");
        jboton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {                
                principal.sonido.sonidoClick();
                principal.jugarBencion(jugadorActual+1);
            }
        });        
        jpBoton.add(jboton);
        this.show();
    }
    private void dibujarCartaBendicionActionPerformed(ActionEvent evt) {
        Heroe heroe= jugadores.get(jugadorActual).getHeroe();
        Carta window = new Carta(this,heroe.getBendicion().getRutaImagen(),2 );
        window.setVisible(true);
    }       

    public void iniciarSecuenciaJuego() {
        principal.jugar();
    }

    public void alternarDiaNoche(boolean esNoche) {
       JLabel lblDia = (JLabel)jpSecuencia0.getComponent(0);
       JLabel lblNoche = (JLabel)jpSecuencia0.getComponent(1);
       if(esNoche){           
            //Activar Noche                   
            activarElementoSecuencia(lblNoche);
            //Desactivar Dia
            desactivarElementoSecuencia(lblDia);
       }else{
           //Activar Dia
            activarElementoSecuencia(lblDia);
           //Desactivar Noche
           desactivarElementoSecuencia(lblNoche);
       }
    }

    private void desactivarElementoSecuencia(JLabel jLabel) {
        jLabel.setBackground(Color.GRAY);
        jLabel.setForeground(Color.BLACK);
    }

    private void activarElementoSecuencia(JLabel jLabel) {
        jLabel.setBackground(Color.BLACK);
        jLabel.setForeground(Color.RED);        
    }
    
    //------------------------------------------------------
    //                          ZORKAL
    //---------------------------------------------------------    
    private void jugarInvocarctionPerformed(ActionEvent evt) {
        principal.jugarInvocar();
    } 
    private void jugarMoverZorkalActionPerformed(ActionEvent evt) {
        principal.jugarMoverGuardian();
    } 
    private void jugarAtacarActionPerformed(ActionEvent evt) {
        principal.jugarAtacarGuardian();
    }    
    private void finalizarTurnoZorkalActionPerformed(ActionEvent evt) {
        principal.finalizarTurnoZorkal();
    }    
    //------------------------------------------------------
    //                          HEROES
    //---------------------------------------------------------
    /*private void jugarMoverHeroesPerformed(ActionEvent evt) {
        principal.jugarMoverHeroes();
    } */
    private void finalizarAtaqueActionPerformed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }     

    public void setCamaraGlobal() {
        this.esEscalado=true;
        jsMapa.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jsMapa.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER); 
        jpMapa.removeAll();
        
        jpMapa.setSize(icMapaEscalado.getIconWidth(),icMapaEscalado.getIconHeight());
        lblMapa.setSize(icMapaEscalado.getIconWidth(),icMapaEscalado.getIconHeight());
        jpMapa.setPreferredSize(new Dimension(icMapaEscalado.getIconWidth(), icMapaEscalado.getIconHeight())); 
        lblMapa.setPreferredSize(new Dimension(icMapaEscalado.getIconWidth(), icMapaEscalado.getIconHeight()));        
        
        lblMapa.setIcon(icMapaEscalado);
        jpMapa.add(lblMapa,0);        

        mapa.escalar(this.getFactorEscaladoX(), this.getFactorEscaladoY(),true);        
        dibujarFichas(true);
        show();
    }

    public void setCamaraPersonal() {
        this.esEscalado=false;
        jsMapa.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jsMapa.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED); 
        jpMapa.removeAll();
        jpMapa.setSize(icMapaOriginal.getIconWidth(),icMapaOriginal.getIconHeight());
        lblMapa.setSize(icMapaOriginal.getIconWidth(),icMapaOriginal.getIconHeight());
        jpMapa.setPreferredSize(new Dimension(icMapaOriginal.getIconWidth(), icMapaOriginal.getIconHeight())); 
        lblMapa.setPreferredSize(new Dimension(icMapaOriginal.getIconWidth(), icMapaOriginal.getIconHeight()));
        lblMapa.setIcon(icMapaOriginal);
        jpMapa.add(lblMapa,0);
        mapa.escalar(this.getFactorEscaladoX(), this.getFactorEscaladoY(),false);
        dibujarFichas(false);        
        show();
    }

    private void dibujarFichas(boolean escaladas) {   
        for(Ficha ficha: principal.getFichas()){
            //ficha.setIsEscalada(escaladas);
            if(escaladas){
                dibujarFichaEnTablero((JLabel)ficha.getFiguraEscalada(), ficha.getCasilla().getX(), ficha.getCasilla().getY());
            }else{
                dibujarFichaEnTablero((JLabel)ficha.getFiguraOriginal(), ficha.getCasilla().getX(), ficha.getCasilla().getY());
            }
            
        }
    }
    public void dibujarFichaEnTablero(JLabel ficha,int x,int y){
        //Este recalculo se hace con el fin de centrar
        ficha.setBounds((x-(ficha.getIcon().getIconWidth()/2)), (y-((ficha.getIcon().getIconHeight())/2)),
        ficha.getIcon().getIconWidth(),
        ficha.getIcon().getIconHeight());
        jpMapa.add(ficha,1,0);
    }    

    public void posicionarCamara(Object ficha) {
        
        //System.out.println("Ficha x");
       jsMapa.getHorizontalScrollBar().setValue(((Ficha)ficha).getCasilla().getX()-(jsMapa.getWidth()/2));
       jsMapa.getVerticalScrollBar().setValue(((Ficha)ficha).getCasilla().getY()-(jsMapa.getHeight()/2));
       //jsMapa.getVerticalScrollBar().setEnabled(false);
    }

    public void dibujarEscogerCriaturaNoche() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void dibujarEscogerCriaturaDia() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void dibujarMoverCriaturas(int indice) {
        this.indiceCriaturaActual=indice;
       Criatura c= guardian.getCriaturasInvocada().get(indice);
       //Dibujar stats
        dibujarCriattura(c);

        posicionarCamara(c.getFicha());
        //Dibujar mover
        dibujarMoverCriatura();
    }
    public void setPersonajeActual(Avatar per){
        this.personajeActual = per;
    }

    public void dibujarAtacarCriaturas(int indiceCriatura) {
        this.indiceCriaturaActual=indiceCriatura;
        Criatura c= guardian.getCriaturasInvocada().get(indiceCriatura);     
       //Dibujar stats
        dibujarCriattura(c);
        try {
            //Posicionar camara
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(Tablero.class.getName()).log(Level.SEVERE, null, ex);
        }
        posicionarCamara(c.getFicha());
        //Dibujar atacar
        dibujarAtacarCriatura();            
    }

    public void mostrarMensajeHabilidad(Habilidad hab) {
        System.out.println("Muestra habilidad");
        JOptionPane.showMessageDialog(this, hab.getTexto(), hab.getNombre(), JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void limpiarContenedores(){        
        for(Component comp:jpAccion.getComponents()){
            jpAccion.remove(comp);
        }
        for(Component comp:jpBoton.getComponents()){
            jpBoton.remove(comp);
        }               
    }

    private void efectuarMovimientoAtaque() {
        JLabel ficha = principal.spell.getSpell1();
        Casilla casilla = principal.power.getCasillaObjetivo();
        int x, y;
        x = casilla.getX();
        y = casilla.getY();
        ficha.setBounds((x-(ficha.getIcon().getIconWidth()/2)), (y-((ficha.getIcon().getIconHeight())/2)),
        ficha.getIcon().getIconWidth(),
        ficha.getIcon().getIconHeight());        
        
        jpMapa.add(ficha,1,0);
        principal.power.resolverHabilidad();
    }




    



 
        
}  
    
    


    

